---
AWSTemplateFormatVersion: "2010-09-09"

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      CidrBlock: "10.0.0.0/16"

  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: "true"

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone: "us-east-1b"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: "true"

  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.2.0/24"

  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone: "us-east-1b"
      CidrBlock: "10.0.3.0/24"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  PublicSubnetRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnetA"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnetB"
      RouteTableId:
        Ref: "PublicRouteTable"

  NATElasticIPA:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATElasticIPB:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGatewayA:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "NATElasticIPA"
          - "AllocationId"
      SubnetId:
        Ref: "PublicSubnetA"

  NATGatewayB:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "NATElasticIPB"
          - "AllocationId"
      SubnetId:
        Ref: "PublicSubnetB"

  PrivateRouteTableA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"

  PrivateRouteTableB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"

  PrivateRouteToInternetA:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTableA"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGatewayA"

  PrivateRouteToInternetB:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTableB"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGatewayB"

  PrivateSubnetRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnetA"
      RouteTableId:
        Ref: "PrivateRouteTableA"

  PrivateSubnetRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnetB"
      RouteTableId:
        Ref: "PrivateRouteTableB"

Outputs:
  VPCId:
    Description: "VPCId of VPC"
    Value:
      Ref: "VPC"
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPCId"

  PublicSubnetA:
    Description: "SubnetId of public subnet A"
    Value:
      Ref: "PublicSubnetA"
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetA"

  PublicSubnetB:
    Description: "SubnetId of public subnet B"
    Value:
      Ref: "PublicSubnetB"
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetB"

  PrivateSubnetA:
    Description: "SubnetId of private subnet A"
    Value:
      Ref: "PrivateSubnetA"
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetA"

  PrivateSubnetB:
    Description: "SubnetId of private subnet B"
    Value:
      Ref: "PrivateSubnetB"
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetB"