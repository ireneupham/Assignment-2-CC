AWSTemplateFormatVersion: 2010-09-09
Parameters:
  NetworkStackName:
    Description: Stack Name of the networking.yaml file
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'

Resources:
  WebAppRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
 
  WebAppInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WebAppRole

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-0c02fb55956c7d316
      IamInstanceProfile: !Ref WebAppInstanceProfile
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: 't3.nano'
      UserData: 
        Fn::Base64: |
          #! /bin/bash
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd

  WebAppAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
      VPCZoneIdentifier: 
        - !ImportValue 
          'Fn::Sub': '${NetworkStackName}-PrivateSubnetA'
        - !ImportValue 
          'Fn::Sub': '${NetworkStackName}-PrivateSubnetB'

  WebAppTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VPCId'
      TargetType: 'instance'
      Port: 80
      Protocol: 'HTTP'
  
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: 'internet-facing'
      Type: 'application'
      Subnets:
        - !ImportValue 
          'Fn::Sub': '${NetworkStackName}-PublicSubnetA'
        - !ImportValue 
          'Fn::Sub': '${NetworkStackName}-PublicSubnetB'
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable port 80 from anywhere
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VPCId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  ALBHTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
        - TargetGroupArn: !Ref WebAppTargetGroup
          Type: "forward"

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from the ALB only
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VPCId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

Outputs:
  InstanceSecurityGroupId:
    Description: "Security Group ID for the EC2 instances"
    Value:
      Ref: InstanceSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-InstanceSecurityGroupId"